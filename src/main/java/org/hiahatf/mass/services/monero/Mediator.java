package org.hiahatf.mass.services.monero;

import org.hiahatf.mass.models.Constants;
import org.hiahatf.mass.models.monero.XmrQuoteTable;
import org.hiahatf.mass.models.monero.wallet.WalletState;
import org.hiahatf.mass.repo.MoneroQuoteRepository;
import org.hiahatf.mass.services.rpc.Monero;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Runnable triggered by the ScheduledExecutor for mediating
 * the consensus wallet for unresolvable swaps in order to
 * prevent mlof (mass loss of funds).
 */
public class Mediator implements Runnable {

    private Logger logger = LoggerFactory.getLogger(Mediator.class);
    private MoneroQuoteRepository quoteRepository;
    private String massWalletFilename;
    private String rpAddress;
    private String quoteId;
    private Monero monero;
    
    /**
    * After the 30 minute consensus wallet time for swap finality
    * revert the funds back to the mass wallet. This swap is no longer
    * valid and is removed from the database
    * @param quoteId
    */
    public Mediator(MoneroQuoteRepository quoteRepository, String quoteId, Monero monero,
    String massWalletFilename, String rpAddress) {
        this.massWalletFilename = massWalletFilename;
        this.quoteRepository = quoteRepository;
        this.rpAddress = rpAddress;
        this.quoteId = quoteId;
        this.monero = monero;
    }

    public void run() {
        XmrQuoteTable table = quoteRepository.findById(quoteId).get();
        monero.controlWallet(WalletState.OPEN, table.getMediator_filename()).subscribe(o -> {
            monero.sweepAll(rpAddress).subscribe(r -> {
                // null check, since rpc since 200 on null result
                if(r.getResult() == null) {
                    logger.error(Constants.MEDIATOR_ERROR);
                }
                signAndSubmit(r.getResult().getMultisig_txset());
                monero.controlWallet(WalletState.CLOSE, table.getMediator_filename()).subscribe(c -> {
                    logger.info("Mediator sweep complete");
                });
            });
        });
    }

    /**
     * MASS application signs and submits the intervention generated by the mediator
     * after the consensus wallet expiration time (t+30 min.)
     * @param txset
     */
    private void signAndSubmit(String txset) {
        monero.controlWallet(WalletState.OPEN, massWalletFilename).subscribe(o -> {
            monero.signMultisig(txset).subscribe(r -> {
                // null check, since rpc since 200 on null result
                if(r.getResult() == null) {
                    logger.error(Constants.MEDIATOR_ERROR);
                }
                monero.submitMultisig(txset).subscribe(s -> {
                    logger.info("Mediation tx: {}", s.getResult().getTx_hash_list().get(0));
                    monero.controlWallet(WalletState.CLOSE, massWalletFilename).subscribe(c -> {
                        logger.info("MASS mediator intervention complete");
                    });
                });
            });
        });
    }
    
}
